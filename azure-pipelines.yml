trigger:
# 1.16 follows upstream/1.16 and receives the development branch changes
- '1.16'

# Development branch to merge into 1.16 when promoting a build.
- 'develop_1.16'

variables:
  depCache: dep_cache_1.16.tar.gz
  depCacheURL: 'https://descript-public.s3.us-west-2.amazonaws.com/descript-gstreamer/dep-source-cache/$(depCache)'
  packageBasename: 'descript-gstreamer'
  packageId: '$(Build.BuildNumber)'
  hostCores: 2

  # All variables are mapped to environment variables. This one is picked up
  # by the descript/config.cbc script. Used upper-snake-case to mimic normal
  # env var naming conventions.
  CACHE_BASE_DIR: '$(Pipeline.Workspace)'

jobs:

# ####################################################################################
# macOS
# ####################################################################################
- job: MacOS
  # Maximum allowed timeout. For an public project with public repos,
  # this should be 360 min (6 hours) according to
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#timeouts
  timeoutInMinutes: 0

  pool:
    vmImage: 'macOS-10.13'

  variables:
    packageName: $(packageBaseName)-mac-$(packageId)

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true

  # Download a cache of dependencies and place it where the configuration
  # file will pick them up, avoiding network roundtrips and errors.
  # The cache is oportunistic: if something is not there, it will be fetched.
  - script: |
      pushd $(CACHE_BASE_DIR)
      curl -OL $(depCacheURL)
      tar xf $(depCache)
      rm -f $(depCache)
    displayName: Download the dependencies cache archive

  - script: |
      ./cerbero-uninstalled -c descript/config.cbc fetch-bootstrap
      ./cerbero-uninstalled -c descript/config.cbc fetch-package gstreamer-1.0 --deps

  - script: ./cerbero-uninstalled -c descript/config.cbc show-config
    displayName: Show cerbero configuration

  - script: ./cerbero-uninstalled -c descript/config.cbc bootstrap -y
    displayName: Boostrapping cerbero

  - script: ./cerbero-uninstalled -c descript/config.cbc package gstreamer-1.0
    displayName: Building package gstreamer-1.0

  - script: |
      tar czf $(packageName)-devel.tar.gz gstreamer-1.0-*-devel-*.pkg
      rm -f gstreamer-1.0-*-devel-*.pkg
      tar czf $(packageName).tar.gz gstreamer-1.0-*.pkg
      rm -f gstreamer-1.0-*.pkg
    displayName: Create distribution packages

  - task: CopyFiles@2
    inputs:
      contents: '$(packageName)*.tar.gz'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy output archives to staging

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(packageName)-devel.tar.gz'
      artifactName: $(packageBasename)-mac-devel
    displayName: Publish devel output archive

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(packageName).tar.gz'
      artifactName: $(packageBasename)-mac
    displayName: Publish output archive

# ####################################################################################
# Windows
# ####################################################################################

- job: Windows
  timeoutInMinutes: 0

  pool:
    # Windows can be cross-compiled from Linux
    vmImage: 'ubuntu-16.04'

  variables:
    packageName: $(packageBaseName)-win-$(packageId)
    archiveName: $(packageName).tar.gz
    devArchiveName: $(packageName)-devel.tar.gz

  steps:

  - script: |
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y apt-utils
      sudo apt-get install -y git python python3 python-setuptools python3-setuptools
    displayName: Install dependencies

  - script: |
      pushd $(CACHE_BASE_DIR)
      curl -OL $(depCacheURL)
      tar xf $(depCache)
      rm -f $(depCache)
    displayName: Download the dependencies cache archive

  - script: |
      ./cerbero-uninstalled -c descript/config.cbc -c config/cross-win64.cbc fetch-bootstrap
      ./cerbero-uninstalled -c descript/config.cbc -c config/cross-win64.cbc fetch-package gstreamer-1.0 --deps

  - script: ./cerbero-uninstalled -c descript/config.cbc -c config/cross-win64.cbc show-config
    displayName: Show cerbero configuration

  # Normally it is not needed to run cerbero as root, but the script tries to
  # change the ulimit for the number of open files, and that fails otherwise,
  # and we don't really care for the user permissions here.
  - script: sudo ./cerbero-uninstalled -c descript/config.cbc -c config/cross-win64.cbc bootstrap -y
    displayName: Boostrapping cerbero

  - script: sudo ./cerbero-uninstalled -c descript/config.cbc -c config/cross-win64.cbc package gstreamer-1.0
    displayName: Building package gstreamer-1.0

  - script: |
      ls -la
    displayName: Show contents & adjust permissions

  - script: sudo chmod a+r *.tar.bz2
    displayName: Make all the code/artifacts world readable

  # For windows only one tar.bz2 package is created on each variant, but, for
  # consistency, package them into archives named just like in the other platforms
  # preserving the underlying package naming scheme that includes the version
  - script: |
      tar czf $(devArchiveName) --owner=0 --group=0 *-devel.tar.bz2
      rm *-devel.tar.bz2
      tar czf $(archiveName) --owner=0 --group=0 *.tar.bz2
      rm *.tar.bz2
    displayName: Create distribution packages

  - task: CopyFiles@2
    inputs:
      contents: '*.tar.gz'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy dev output archive to staging

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(archiveName)'
      artifactName: $(packageBasename)-win
    displayName: Publish output package

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(devArchiveName)'
      artifactName: $(packageName)-win-dev
    displayName: Publish dev output package

# ####################################################################################
# Linux
# ####################################################################################
- job: Linux
  timeoutInMinutes: 0

  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    packageName: $(packageBaseName)-linux-$(packageId)
    archiveName: $(packageName).tar.gz
    devArchiveName: $(packageName)-dev.tar.gz
    dbgArchiveName: $(packageName)-dbg.tar.gz

  steps:

  - script: |
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y apt-utils
      sudo apt-get install -y git python python3 python-setuptools python3-setuptools
    displayName: Install dependencies

  - script: |
      pushd $(CACHE_BASE_DIR)
      curl -OL $(depCacheURL)
      tar xf $(depCache)
      rm -f $(depCache)
    displayName: Download the dependencies cache archive

  - script: |
      ./cerbero-uninstalled -c descript/config.cbc fetch-bootstrap
      ./cerbero-uninstalled -c descript/config.cbc fetch-package gstreamer-1.0 --deps

  - script: ./cerbero-uninstalled -c descript/config.cbc show-config
    displayName: Show cerbero configuration

  - script: sudo ./cerbero-uninstalled -c descript/config.cbc bootstrap -y
    displayName: Boostrapping cerbero

  - script: sudo ./cerbero-uninstalled -c descript/config.cbc package gstreamer-1.0
    displayName: Building package gstreamer-1.0

  - script: ls
    displayName: Show contents

  - script: |
      tar czf $(devArchiveName) gstreamer*-dev_*.deb
      rm -f gstreamer*-dev_*.deb
      tar czf $(dbgArchiveName) gstreamer*-dbg_*.deb
      rm -f gstreamer*-dbg_*.deb
      tar czf $(archiveName) gstreamer*.deb
    displayName: Create distribution packages

  - script: ls
    displayName: Show contents after packaging

  - task: CopyFiles@2
    inputs:
      contents: $(archiveName)
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy output archive to staging

  - task: CopyFiles@2
    inputs:
      contents: $(devArchiveName)
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy dev output archive to staging

  - task: CopyFiles@2
    inputs:
      contents: $(dbgArchiveName)
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy debug output archive to staging

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(archiveName)'
      artifactName: $(packageBasename)-linux
    displayName: Publish output package

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(devArchiveName)'
      artifactName: $(packageBasename)-linux-dev
    displayName: Publish dev output package

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(dbgArchiveName)'
      artifactName: $(packageBasename)-linux-dbg
    displayName: Publish debug output package
