trigger:
- master
- develop

variables:
  packageBasename: 'descript-gstreamer'
  packageId: '$(Build.BuildNumber)'
  hostCores: 2

jobs:

- job: MacOS
  # Maximum allowed timeout. For an public project with public repos,
  # this should be 360 min (6 hours) according to
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#timeouts
  timeoutInMinutes: 0

  pool:
    vmImage: 'macOS-10.13'

  variables:
    packageName: $(packageBaseName)-mac-$(packageId)

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true

  - script: ./cerbero-uninstalled bootstrap -y
    displayName: Boostrapping cerbero

  - script: ./cerbero-uninstalled package gstreamer-1.0
    displayName: Building package gstreamer-1.0

  - script: mkdir $(packageName)
    displayName: Creating package

- job: Windows
  timeoutInMinutes: 0

  pool:
    # Windows can be cross-compiled from Linux
    vmImage: 'ubuntu-16.04'

  variables:
    packageName: $(packageBaseName)-win-$(packageId)

  steps:

  - script: |
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y apt-utils
      sudo apt-get install -y git python python3 python-setuptools python3-setuptools
    displayName: Install dependencies

  # Normally it is not needed to run cerbero as root, but the script tries to
  # change the ulimit for the number of open files, and that fails otherwise,
  # and we don't really care for the user permissions here.
  - script: sudo ./cerbero-uninstalled -c config/cross-win64.cbc bootstrap -y
    displayName: Boostrapping cerbero

  - script: sudo ./cerbero-uninstalled -c config/cross-win64.cbc package gstreamer-1.0
    displayName: Building package gstreamer-1.0

  - script: ls -la
    displayName: Show contents

  - script: mkdir $(packageName)
    displayName: Creating package

- job: Linux
  timeoutInMinutes: 0

  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    packageName: $(packageBaseName)-linux-$(packageId)
    archiveName: $(packageName).tar.gz
    devArchiveName: $(packageName)-dev.tar.gz
    dbgArchiveName: $(packageName)-dbg.tar.gz

  steps:

  - script: |
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y apt-utils
      sudo apt-get install -y git python python3 python-setuptools python3-setuptools
    displayName: Install dependencies

  - script: sudo ./cerbero-uninstalled bootstrap -y
    displayName: Boostrapping cerbero

  - script: sudo ./cerbero-uninstalled package gstreamer-1.0
    displayName: Building package gstreamer-1.0

  - script: ls
    displayName: Show contents

  - script: |
      tar czf $(devArchiveName) gstreamer*-dev_*.deb
      rm -f gstreamer*-dev_*.deb
      tar czf $(dbgArchiveName)-dbg.tar.gz gstreamer*-dbg_*.deb
      rm -f gstreamer*-dbg_*.deb
      tar czf $(archiveName)-gstreamer*.deb
    displayName: Create distribution packages

  - script: ls
    displayName: Show contents after packaging

  - task: CopyFiles@2
    inputs:
      contents: $(archiveName)
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy output archive to staging

  - task: CopyFiles@2
    inputs:
      contents: $(devArchiveName)
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy dev output archive to staging

  - task: CopyFiles@2
    inputs:
      contents: $(dbgArchiveName)
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: Copy debug output archive to staging

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(archiveName)'
      artifactName: $(packageBasename)-linux
    displayName: Publish output package

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(devArchiveName)'
      artifactName: $(packageName)-linux-dev
    displayName: Publish dev output package

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/$(dbgArchiveName)'
      artifactName: $(packageName)-linux-dbg
    displayName: Publish debug output package
